{"version":3,"file":"319.js","mappings":"8NASA,MAgGA,EAhGe,KACX,MAAM,KAACA,EAAD,MAAOC,EAAP,WAAcC,IAAYC,EAAAA,EAAAA,IAAO,kCAAmCC,EAAAA,IACrEC,EAAOC,IAAiBC,EAAAA,EAAAA,GAAS,KACjCC,EAAUC,IAAoBF,EAAAA,EAAAA,GAAS,KACvCG,EAAUC,IAAgBC,EAAAA,EAAAA,UAAS,KACnCC,EAAeC,IAAqBF,EAAAA,EAAAA,UAAS,KAC7CG,EAAeC,IAAoBJ,EAAAA,EAAAA,WAAS,IAC5CK,EAAaC,IAAgBN,EAAAA,EAAAA,UAAS,KACtCO,EAAeC,IAAmBR,EAAAA,EAAAA,WAAS,GAE5CS,GAAkBC,EAAAA,EAAAA,cAAaC,IACnCZ,EAAYY,EAAEC,OAAOC,OACrBT,EAAiBO,EAAEC,OAAOC,QAAQZ,KACnC,CAACA,IAEEa,GAAuBJ,EAAAA,EAAAA,cAAaC,IACtCT,EAAiBS,EAAEC,OAAOC,OAC1BT,EAAiBO,EAAEC,OAAOC,QAAQf,KACnC,CAACA,IAEEiB,GAAWL,EAAAA,EAAAA,cAAaC,IAC1BA,EAAEK,iBACEb,IACAc,QAAQC,IAAI,cACZZ,EAAe,IACfE,GAAiB,GACjBW,IAAAA,KACM,kCAAmC,CACrC1B,MAAAA,EACAG,SAAAA,EACAE,SAAAA,IAEHsB,MAAMC,IACHJ,QAAQC,IAAIG,GACZb,GAAiB,MAEpBc,OAAOjC,IACJ4B,QAAQC,IAAI7B,EAAMgC,UAClBf,EAAejB,EAAMgC,SAASjC,SAEjCmC,SAAQ,YAEd,CAAC9B,EAAOG,EAAUE,EAAUG,EAAeE,IAE9C,OAAGf,EACQ,gBAAC,KAAD,CAAUoC,GAAG,uBAIpB,uBAAKC,GAAG,aACN,gBAAC,KAAD,eACA,gBAAC,KAAD,CAAMV,SAAUA,GACd,gBAAC,KAAD,CAAOU,GAAG,eACR,sCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,QAAQD,GAAG,QAAQE,KAAK,QAAQd,MAAOpB,EAAQmC,SAAUlC,MAGzE,gBAAC,KAAD,CAAO+B,GAAG,kBACR,mCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,OAAOD,GAAG,WAAWE,KAAK,WAAWd,MAAOjB,EAAUgC,SAAU/B,MAGhF,gBAAC,KAAD,CAAO4B,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,WAAWD,GAAG,WAAWE,KAAK,WAAWd,MAAOf,EAAU8B,SAAUnB,MAGpF,gBAAC,KAAD,CAAOgB,GAAG,wBACR,uCACA,2BACE,gBAAC,KAAD,CACEC,KAAK,WACLD,GAAG,iBACHE,KAAK,iBACLd,MAAOZ,EACP2B,SAAUd,KAGbX,GAAiB,gBAAC,KAAD,0BAChBP,GAAY,gBAAC,KAAD,qBACbS,GAAe,gBAAC,KAAD,KAAQA,GACvBE,GAAiB,gBAAC,KAAD,6BAEpB,gBAAC,KAAD,CAAQmB,KAAK,UAAb,SAEF,gBAAC,KAAD,mBAEE,gBAAC,KAAD,CAAMF,GAAG,UAAT","sources":["webpack://alecture/./pages/SignUp/index.tsx"],"sourcesContent":["\nimport useInput from '@hooks/useInput';\nimport React, { useCallback, useState, VFC } from 'react';\nimport axios from 'axios';\nimport { Success, Form, Error, Label, Input, LinkContainer, Button, Header } from './styles';\nimport { Link, Redirect } from 'react-router-dom'; //리액트 라우터에서는 a태그 대신에 Link 태그를 사용하는 것이 더 바람직 \nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\n\nconst SignUp = () => {\n    const {data, error, revalidate}=useSWR('http://localhost:3095/api/users', fetcher);\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, setPassword ] = useState('');\n  const [passwordCheck, setPasswordCheck ] = useState('');\n  const [mismatchError, setMismatchError] = useState(false);\n  const [signUpError, setSignUpError]=useState('');\n  const [signUpSuccess, setSignUpSuccess] =useState(false);\n\n  const onChangePassword= useCallback((e)=>{\n    setPassword(e.target.value);\n    setMismatchError(e.target.value!==passwordCheck);\n}, [passwordCheck]);\n\nconst onChangePasswordCheck =useCallback((e)=>{\n    setPasswordCheck(e.target.value);\n    setMismatchError(e.target.value!==password);\n}, [password]);\n\nconst onSubmit = useCallback((e)=>{\n    e.preventDefault();\n    if(!mismatchError){\n        console.log('서버로 회원가입하기');\n        setSignUpError(''); //1. 비동기 요청 보내기 직전의 로딩\n        setSignUpSuccess(false);\n        axios //비동기 요청 \n        .post('http://localhost:3095/api/users', {\n            email,\n            nickname,\n            password,\n        })\n        .then((response)=>{ //2. 비동기 요청의 성공단계\n            console.log(response); //요청에 대한 응답이 담겨있음\n            setSignUpSuccess(true);\n        })// 성공하면 이 코드 실행\n        .catch((error)=>{ //3. 비동기 요청의 실패단계\n            console.log(error.response); //에러가 있다면 에러가 여기 담겨있음\n            setSignUpError(error.response.data); //error.response.data에는 어떤 에러가 발생했는지 적혀있음\n        }) //실패하면 이 코드 실행\n        .finally(()=>{}); //성공하든 싫패하든 이 코드는 무조건 실행 \n    }\n}, [email, nickname, password, passwordCheck, mismatchError]);\n\nif(data){\n    return <Redirect to=\"/workspace/channel\"/>;\n}\n\n  return (\n    <div id=\"container\">\n      <Header>Sleact</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email}  onChange={onChangeEmail}/>\n          </div>\n        </Label>\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <div>\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" value={nickname} onChange={onChangeNickname} />\n          </div>\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n        </Label>\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              type=\"password\"\n              id=\"password-check\"\n              name=\"password-check\"\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n            />\n          </div>\n          {mismatchError && <Error>비밀번호가 일치하지 않습니다.</Error>}\n          {!nickname && <Error>닉네임을 입력해주세요.</Error>}\n          {signUpError && <Error>{signUpError}</Error>}\n          {signUpSuccess && <Success>회원가입되었습니다! 로그인해주세요.</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 회원이신가요?&nbsp;\n        <Link to=\"/login\">로그인 하러가기</Link> \n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;"],"names":["data","error","revalidate","useSWR","fetcher","email","onChangeEmail","useInput","nickname","onChangeNickname","password","setPassword","useState","passwordCheck","setPasswordCheck","mismatchError","setMismatchError","signUpError","setSignUpError","signUpSuccess","setSignUpSuccess","onChangePassword","useCallback","e","target","value","onChangePasswordCheck","onSubmit","preventDefault","console","log","axios","then","response","catch","finally","to","id","type","name","onChange"],"sourceRoot":""}